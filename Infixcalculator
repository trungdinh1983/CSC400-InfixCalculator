/*
SIMPLE CALCULATOR PSEUDOCODE:

1. Main Program
   Input Example: "2 + 3 * 4"
   Output Example: 14

   Steps:
   1. Check if math expression is valid
   2. Convert to computer-friendly format
   3. Calculate result
   4. Show answer (or error if invalid)

2. Converting to Computer Format
   Example: "2 + 3 * 4" â†’ "2 3 4 * +"
   
   Rules:
   - Numbers: Keep them as is
   - Operators (+,-,*,/,%): 
     * Higher priority (* / %) calculated first
     * Same priority (+ -) calculated left to right
   - Brackets: Calculate everything inside first

3. Calculating Result
   Example using "2 3 4 * +"
   1. Find first complete calculation (3 4 *)
   2. Do the math (3 * 4 = 12)
   3. Replace it in expression (2 12 +)
   4. Repeat until done (2 + 12 = 14)

Note: The program handles:
- Basic math: +, -, *, /, %
- Numbers of any size
- Brackets ( )
- Error checking
*/

import java.util.*;

public class InfixCalculator {
    // Method to directly evaluate postfix expressions
    public int evaluatePostfixExpression(String postfixExpression) {
        try {
            return calculateAnswer(postfixExpression);
        } catch (Exception error) {
            System.err.println("Error evaluating postfix expression: " + error.getMessage());
            throw error;
        }
    }
    // Store which operators should be calculated first
    // Higher number means calculate first
    private static final Map<Character, Integer> operatorPriority = new HashMap<>();
    static {
        operatorPriority.put('+', 1);  // Addition: lower priority
        operatorPriority.put('-', 1);  // Subtraction: lower priority
        operatorPriority.put('*', 2);  // Multiplication: higher priority
        operatorPriority.put('/', 2);  // Division: higher priority
        operatorPriority.put('%', 2);  // Modulo: higher priority
    }

    // Check if a character is a math operator
    private boolean isMathOperator(char character) {
        return operatorPriority.containsKey(character);
    }

    // Convert normal math expression to computer-friendly format
    private String changeToComputerFormat(String normalMathExpression) {
        StringBuilder computerFormat = new StringBuilder();
        Stack<Character> waitingOperators = new Stack<>();
        
        for (int position = 0; position < normalMathExpression.length(); position++) {
            char currentCharacter = normalMathExpression.charAt(position);
            
            // Handle numbers (including numbers with multiple digits)
            if (Character.isDigit(currentCharacter)) {
                // Keep adding digits until we find something that's not a number
                while (position < normalMathExpression.length() && 
                       Character.isDigit(normalMathExpression.charAt(position))) {
                    computerFormat.append(normalMathExpression.charAt(position));
                    position++;
                }
                position--; // Go back one step since the for loop will move forward
                computerFormat.append(' '); // Add space to separate numbers
            }
            // Handle math operators
            else if (isMathOperator(currentCharacter)) {
                // Handle operators that should be calculated first
                while (!waitingOperators.isEmpty() && waitingOperators.peek() != '(' &&
                       operatorPriority.get(waitingOperators.peek()) >= operatorPriority.get(currentCharacter)) {
                    computerFormat.append(waitingOperators.pop()).append(' ');
                }
                waitingOperators.push(currentCharacter);
            }
            // Handle opening bracket
            else if (currentCharacter == '(') {
                waitingOperators.push(currentCharacter);
            }
            // Handle closing bracket
            else if (currentCharacter == ')') {
                // Calculate everything inside the brackets
                while (!waitingOperators.isEmpty() && waitingOperators.peek() != '(') {
                    computerFormat.append(waitingOperators.pop()).append(' ');
                }
                if (!waitingOperators.isEmpty()) {
                    waitingOperators.pop(); // Remove the opening bracket '('
                }
            }
        }
        
        // Add any remaining operators to the result
        while (!waitingOperators.isEmpty()) {
            if (waitingOperators.peek() == '(') {
                throw new IllegalArgumentException("Math Error: You have an extra opening bracket '('");
            }
            computerFormat.append(waitingOperators.pop()).append(' ');
        }
        
        return computerFormat.toString().trim();
    }

    // Calculate the final answer from computer format
    private int calculateAnswer(String computerFormat) {
        Stack<Integer> numbers = new Stack<>();
        String[] parts = computerFormat.split("\\s+");
        
        for (String currentPart : parts) {
            // If it's an operator, calculate
            if (currentPart.length() == 1 && isMathOperator(currentPart.charAt(0))) {
                if (numbers.size() < 2) {
                    throw new IllegalArgumentException("Math Error: Not enough numbers for the operation");
                }
                int secondNumber = numbers.pop();
                int firstNumber = numbers.pop();
                numbers.push(doMathOperation(firstNumber, secondNumber, currentPart.charAt(0)));
            } 
            // If it's a number, save it
            else {
                try {
                    numbers.push(Integer.parseInt(currentPart));
                } catch (NumberFormatException e) {
                    throw new IllegalArgumentException("Error: '" + currentPart + "' is not a valid number");
                }
            }
        }
        
        if (numbers.size() != 1) {
            throw new IllegalArgumentException("Math Error: Too many numbers in the expression");
        }
        return numbers.pop();
    }

    // Perform the actual math operation
    private int doMathOperation(int firstNumber, int secondNumber, char operator) {
        switch (operator) {
            case '+': return firstNumber + secondNumber;
            case '-': return firstNumber - secondNumber;
            case '*': return firstNumber * secondNumber;
            case '/': 
                if (secondNumber == 0) throw new ArithmeticException("Math Error: Cannot divide by zero!");
                return firstNumber / secondNumber;
            case '%': 
                if (secondNumber == 0) throw new ArithmeticException("Math Error: Cannot calculate remainder when dividing by zero!");
                return firstNumber % secondNumber;
            default: throw new IllegalArgumentException("Unknown math operator: " + operator);
        }
    }

    // Main method to calculate the expression
    public int calculateExpression(String mathExpression) {
        try {
            // Remove extra spaces and check if expression is empty
            mathExpression = mathExpression.replaceAll("\\s+", "");
            if (mathExpression.isEmpty()) {
                throw new IllegalArgumentException("Error: Empty math expression");
            }
            
            // Convert to computer format and calculate
            String computerFormat = changeToComputerFormat(mathExpression);
            return calculateAnswer(computerFormat);
        } catch (Exception error) {
            System.err.println("Error: " + error.getMessage());
            throw error;
        }
    }

    // Main program to test the calculator
    public static void main(String[] args) {
        InfixCalculator calculator = new InfixCalculator();
        
        System.out.println("\n--- Testing Infix Expressions ---");
        // Essential test cases covering all requirements
        String[] testExpressions = {
            "(4+2)*3",           // Test basic operations and parentheses
            "22+33*2",          // Test multi-digit numbers
            "15/5+3",           // Test division operation
            "20%6",             // Test modulo operation
            "(2+3",             // Test invalid expression (missing parenthesis)
            "5++3"              // Test invalid expression (invalid operator usage)
        };

        // Try each expression and show the result
        for (int i = 0; i < testExpressions.length; i++) {
            System.out.println("\nTrying to calculate: " + testExpressions[i]);
            try {
                int answer = calculator.calculateExpression(testExpressions[i]);
                System.out.println("The answer is: " + answer);
            } catch (Exception error) {
                System.err.println("Oops! " + error.getMessage());
            }
        }

        System.out.println("\n--- Testing Postfix Expressions ---");
        // Essential postfix test cases
        String[] postfixTests = {
            "4 2 + 3 *",       // Test basic postfix evaluation
            "22 33 2 * +",     // Test multi-digit numbers in postfix
            "1 + 2"            // Test invalid postfix expression
        };

        for (String expression : postfixTests) {
            System.out.println("\nTrying to calculate postfix: " + expression);
            try {
                int answer = calculator.evaluatePostfixExpression(expression);
                System.out.println("The answer is: " + answer);
            } catch (Exception error) {
                System.err.println("Oops! " + error.getMessage());
            }
        }
    }
}